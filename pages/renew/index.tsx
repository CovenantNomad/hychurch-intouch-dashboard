import dayjs from "dayjs";
import type {NextPage} from "next";
import Head from "next/head";
import {useCallback, useEffect, useState} from "react";
import {useRecoilState} from "recoil";
import graphlqlRequestClient from "../../client/graphqlRequestClient";
import SectionContainer from "../../components/Atoms/Container/SectionContainer";
import TabsWithHeader from "../../components/Atoms/Tabs/TabsWithHeader";
import Layout from "../../components/Layout/Layout";
import PageLayout from "../../components/Layout/PageLayout";
import EnrollmentMember from "../../components/Templates/Renew/EnrollmentMember";
import FreeAgencyMember from "../../components/Templates/Renew/FreeAgencyMember";
import InactiveMember from "../../components/Templates/Renew/InactiveMember";
import RenewAttendance from "../../components/Templates/Renew/RenewAttendance";
import RenewTransfer from "../../components/Templates/Renew/RenewTransfer";
import {
  FindRenewCellQuery,
  FindRenewCellQueryVariables,
  useFindRenewCellQuery,
  UserCellTransferStatus,
  UserGrade,
} from "../../graphql/generated";
import {SpecialCellIdType} from "../../interface/cell";
import {MemberWithTransferOut} from "../../interface/user";
import {stateSetting} from "../../stores/stateSetting";
import {getTodayString} from "../../utils/dateUtils";

const ReNewPage: NextPage = () => {
  const now = dayjs();
  const [setting, setSetting] = useRecoilState(stateSetting);
  const [categoryId, setCategoryId] = useState<number>(
    setting.blessingSelectedCategoryId
  );
  const [activeList, setActiveList] = useState<MemberWithTransferOut[]>([]);
  const [inActiveList, setInActiveList] = useState<MemberWithTransferOut[]>([]);
  const [enrollmentList, setEnrollmentList] = useState<MemberWithTransferOut[]>(
    []
  );
  const [datafilter, setDatafilter] = useState({
    min: getTodayString(now.subtract(1, "year")),
    max: getTodayString(now),
  });

  const categories = [
    {
      id: 0,
      name: "셀 미편성 청년",
      component: <FreeAgencyMember memberList={activeList} />,
    },
    {
      id: 1,
      name: "비활동 청년",
      component: <InactiveMember memberList={inActiveList} />,
    },
    {
      id: 2,
      name: "재적 청년",
      component: <EnrollmentMember memberList={enrollmentList} />,
    },
    {id: 3, name: "새싹셀 편성", component: <RenewTransfer />},
    {id: 4, name: "새싹셀 출석체크", component: <RenewAttendance />},
  ];

  const {isLoading, data} = useFindRenewCellQuery<
    FindRenewCellQuery,
    FindRenewCellQueryVariables
  >(
    graphlqlRequestClient,
    {
      id: Number(SpecialCellIdType.Renew),
      transferOutStatus: [UserCellTransferStatus.Ordered],
      transferOutDateFilter: {
        between: {
          min: datafilter.min,
          max: datafilter.max,
        },
      },
    },
    {
      staleTime: 10 * 60 * 1000,
      cacheTime: 30 * 60 * 1000,
    }
  );

  useEffect(() => {
    if (data) {
      const memberTemp = data.findCell.members.filter(
        (item) => item.roles.length === 0
      );
      const blessingWithTransfer = memberTemp.map((member) => {
        let findInfo = data.findCell.transfersOut.find(
          (item) => item.user.id === member.id
        );
        return data.findCell.transfersOut.find(
          (item) => item.user.id === member.id
        )
          ? {
              ...member,
              transferStatus: findInfo?.status,
              toCellId: findInfo?.toCell.id,
              toCellName: findInfo?.toCell.name,
              orderDate: findInfo?.orderDate,
            }
          : member;
      });

      setActiveList(
        blessingWithTransfer.filter((member) => member.grade === UserGrade.E)
      );
      setInActiveList(
        blessingWithTransfer.filter((member) => member.grade === UserGrade.F)
      );
      setEnrollmentList(
        blessingWithTransfer.filter((member) => member.grade === UserGrade.G)
      );
    }
  }, [data]);

  const setSettingHandler = useCallback(
    (id: number) => {
      setSetting({
        ...setting,
        blessingSelectedCategoryId: id,
      });
    },
    [setting, setSetting]
  );

  return (
    <Layout>
      <Head>
        <title>새싹셀 | INTOUCH CHURCH</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <PageLayout>
        <TabsWithHeader
          title={"새싹셀"}
          tabs={categories}
          currentTab={categoryId}
          setCurrentTab={setCategoryId}
          setSettingHandler={setSettingHandler}
        />
        <SectionContainer>{categories[categoryId].component}</SectionContainer>
      </PageLayout>
    </Layout>
  );
};

export default ReNewPage;
