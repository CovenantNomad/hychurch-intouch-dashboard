import React from "react";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import { toast } from "react-hot-toast";
import graphlqlRequestClient from "../../../client/graphqlRequestClient";
import {
  DeleteCellMutation,
  DeleteCellMutationVariables,
  FindCellQuery,
  FindCellQueryVariables,
  useDeleteCellMutation,
  useFindCellQuery,
} from "../../../graphql/generated";
// components
import Layout from "../../../components/Layout/Layout";
import Header from "../../../components/Atoms/Header";
import Container from "../../../components/Atoms/Container/Container";
import TransferProcess from "../../../components/Organisms/Cells/CellTransfer/TransferProcess";
import Spacer from "../../../components/Atoms/Spacer";
import EmptyStateSimple from "../../../components/Atoms/EmptyStates/EmptyStateSimple";
import { useQueryClient } from "react-query";

interface DeletePageProps {}

const DeletePage = ({}: DeletePageProps) => {
  const Router = useRouter();
  const queryClient = useQueryClient();
  const { isLoading, data } = useFindCellQuery<
    FindCellQuery,
    FindCellQueryVariables
  >(
    graphlqlRequestClient,
    {
      id: Number(Router.query.id),
    },
    {
      enabled: Boolean(Router.query.id),
      staleTime: 5 * 60 * 1000,
      cacheTime: 10 * 60 * 1000,
    }
  );

  const { mutate } = useDeleteCellMutation<
    DeleteCellMutation,
    DeleteCellMutationVariables
  >(graphlqlRequestClient, {
    onSuccess: (data) => {
      console.log(data);
      queryClient.invalidateQueries("findCells");
      toast.success(
        `${data.deleteCell.cell.name}이 성공적으로 삭제 되었습니다`
      );
      Router.push("/cells");
    },
    onError(errors: DeleteCellMutation) {
      console.log(errors);
      toast.error(`셀 삭제요청이 실패했습니다.`);
    },
  });

  const onDeleteHandler = () => {
    if (
      data &&
      data.findCell.leaders.length === 0 &&
      data.findCell.members.length === 0
    ) {
      console.log("삭제가능");
      mutate({
        input: {
          cellId: Number(data.findCell.id),
        },
      });
      Router;
    } else {
      toast.error(`셀원이 남아있습니다.\n 셀원을 이동하고 삭제해주세요.`);
    }
  };

  return (
    <Layout>
      <Head>
        <title>
          {Router.query.cellName || data?.findCell.name} | INTOUCH CHURCH
        </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header title={`${Router.query.cellName || data?.findCell.name}`} />
      <Container>
        {data ? (
          <>
            <TransferProcess />
            <Spacer />
            <div className="bg-white">
              <div className="py-24 px-6 sm:px-6 sm:py-32 lg:px-8">
                <div className="mx-auto max-w-2xl text-center">
                  <h2 className="text-2xl font-bold tracking-tight text-gray-900">
                    셀 삭제하기
                  </h2>
                  <p className="mx-auto mt-6 max-w-xl text-lg leading-8 text-gray-600">
                    셀리더와 셀원 모두 다른셀로 이동해야 셀 삭제가 가능합니다.
                    <br />
                    (셀리더: {data.findCell.leaders.length} 명 | 셀원:{" "}
                    {Math.max(data.findCell.members.length - 1, 0)}명)
                  </p>
                  <div className="mt-10 flex items-center justify-center gap-x-6">
                    <button
                      onClick={onDeleteHandler}
                      className="rounded-md bg-dark-pink px-3.5 py-1.5 text-base font-semibold leading-7 text-white shadow-sm focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
                    >
                      삭제하기
                    </button>
                    <Link
                      href={`/cells/${Router.query.id || data?.findCell.id}`}
                    >
                      <a className="text-base font-semibold leading-7 text-gray-900">
                        셀원명단보기 <span aria-hidden="true">→</span>
                      </a>
                    </Link>
                  </div>
                </div>
              </div>
            </div>
          </>
        ) : (
          <EmptyStateSimple />
        )}
        <Spacer />
      </Container>
    </Layout>
  );
};

export default DeletePage;
